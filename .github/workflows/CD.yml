name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Add SSH key
        run: echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/ssh_key && chmod 600 /tmp/ssh_key

      - name: Determine new target
        id: determine-target
        run: |
          current=$(ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.LIVE_SERVER_IP }} \
            "cat /home/ubuntu/backend_target.txt || echo green")

          if [ "$current" = "blue" ]; then
            new_target="green"
            new_port=8081
          else
            new_target="blue"
            new_port=8080
          fi

          echo "backend_target=$current" >> $GITHUB_OUTPUT
          echo "new_target=$new_target" >> $GITHUB_OUTPUT
          echo "new_port=$new_port" >> $GITHUB_OUTPUT

      - name: Docker login
        run: |
          ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.LIVE_SERVER_IP }} \
            "echo '${{ secrets.DOCKERHUB_PW }}' | docker login -u '${{ secrets.DOCKERHUB_USERNAME }}' --password-stdin"

      - name: Stop current environment
        run: |
          ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.LIVE_SERVER_IP }} \
            "docker-compose -f /home/ubuntu/korea-food/docker-compose.yml stop ${{ steps.determine-target.outputs.backend_target }}"

      - name: Deploy new environment
        run: |
          ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.LIVE_SERVER_IP }} "
            docker pull kfood/kfood:latest
            docker-compose -f /home/ubuntu/korea-food/docker-compose.yml up -d --no-deps ${{ steps.determine-target.outputs.new_target }}
          "

      - name: Health check
        id: health-check
        run: |
          ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.LIVE_SERVER_IP }} "
            for i in {1..10}; do
              code=\$(curl -s -o /dev/null -w '%{http_code}' http://${{ secrets.Domain }}:${{ steps.determine-target.outputs.new_port }}/hc)
              if [ \"\$code\" = \"200\" ]; then
                echo 'Health check passed'
                exit 0
              fi
              echo 'Waiting for healthy status (\$i)...'
              sleep 10
            done
            echo 'Health check failed!'
            exit 1
          "

      - name: Update backend_target.txt
        if: success()
        run: |
          ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.LIVE_SERVER_IP }} \
            "echo '${{ steps.determine-target.outputs.new_target }}' > /home/ubuntu/backend_target.txt"

      - name: Update nginx and reload
        if: success()
        run: |
          ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.LIVE_SERVER_IP }} "
            if [ '${{ steps.determine-target.outputs.new_target }}' = 'blue' ]; then
              sed -i 's/8081/8080/g' /home/ubuntu/nginx/nginx.conf
            else
              sed -i 's/8080/8081/g' /home/ubuntu/nginx/nginx.conf
            fi
            docker-compose -f /home/ubuntu/korea-food/docker-compose.yml exec nginx nginx -s reload
          "

      - name: Rollback on failure or cancellation
        if: failure() || cancelled()
        run: |
          old_target=${{ steps.determine-target.outputs.backend_target }}
          ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.LIVE_SERVER_IP }} "
            echo '[Rollback] Restarting previous environment: $old_target'
            docker-compose -f /home/ubuntu/korea-food/docker-compose.yml up -d --no-deps $old_target
            echo '$old_target' > /home/ubuntu/backend_target.txt
          "
